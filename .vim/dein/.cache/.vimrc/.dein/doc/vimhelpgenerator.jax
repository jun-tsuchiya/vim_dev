*vimhelpgenerator.txt*	vimプラグインのヘルプファイルを自動生成する。

Author  : LeafCage <leafcage+vim @ gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
目次						*vimhelpgenerator-contents*

概要				|vimhelpgenerator-introduction|
使い方				|vimhelpgenerator-usage|
インターフェイス		|vimhelpgenerator-interface|
  変数				  |vimhelpgenerator-variables|
  コマンド			  |vimhelpgenerator-commands|
  関数				  |vimhelpgenerator-functions|
overriderについて		|vimhelpgenerator-overrider|


==============================================================================
概要						*vimhelpgenerator-introduction*

*vimhelpgenerator* はプラグインを構成するファイルからヘルプを自動生成するVimプ
ラグインです。ヘルプファイル作成の負担を減らすために開発されました。
プラグインの変数、コマンド、キーマップ、関数を収集して、テンプレートに則って出
力します。

最新版:
https://github.com/LeafCage/vimhelpgenerator.vim


==============================================================================
使い方						*vimhelpgenerator-usage*

*ソースファイルからヘルプファイルを生成する ~
ヘルプファイルを作成したいプラグインの、いずれかのファイルを開いて
|:VimHelpGenerator|を実行する。
確認プロンプトが出るので e で実行継続する。
作成後、自動的に作成されたファイルが開かれるので、そのまま編集をする。

*ヘルプファイルからREADME.mdを生成する ~
ヘルプファイル内で、README.mdに含めたい行をビジュアル行選択した後、
|:HelpIntoMarkdown|を実行する。
レジスタに変換結果がセットされ、README.mdが開かれるので任意の場所で|put|する。


==============================================================================
インターフェイス				*vimhelpgenerator-interface*

------------------------------------------------------------------------------
変数						*vimhelpgenerator-variables*

g:vimhelpgenerator_virtualhelpopencmd	*g:vimhelpgenerator_virtualhelpopencmd*
	既定値: "split"
	|:VimHelpGeneratorVirtual|を実行したときの仮想バッファの開き方。


g:vimhelpgenerator_version			*g:vimhelpgenerator_version*
	既定値: "Version :"
	ヘルプ先頭に表示される "Version :" の行に表示される文字。
	空文字にすると省略される。


g:vimhelpgenerator_author			*g:vimhelpgenerator_author*
	既定値: "Author  :"
	ヘルプ先頭に表示される "Author  :" の行に表示される文字。
	空文字にすると省略される。


g:vimhelpgenerator_license			*g:vimhelpgenerator_license*
	既定値: "vimhelpgenerator/MIT"
	ヘルプ先頭に表示されるライセンス表示は、'runtimepath'の通っている場所
	にあるこのファイルの内容が読み込まれて挿入される。


g:vimhelpgenerator_gitignore_lines	*g:vimhelpgenerator_gitignore_lines*
	既定値: ["/doc/tags*"]
	vimhelpgeneratorが作成する.gitignoreファイルの中身。
	リストの一要素が一行に該当する。
	これが空の場合、vimhelpgeneratorは.gitignoreファイルを作らない。


g:vimhelpgenerator_uri				*g:vimhelpgenerator_uri*
	既定値: "https://github.com/user/"
	「概要」の部分に表示されるプラグインのURI。
	空文字にすると無効。


g:vimhelpgenerator_modeline			*g:vimhelpgenerator_modeline*
	既定値: "vim:tw=78:ts=8:ft=help:norl:noet:fen:"
	ヘルプファイル末尾に挿入されるモードライン。


g:vimhelpgenerator_defaultlanguage	*g:vimhelpgenerator_defaultlanguage*
	既定値: "ja"
	作成するヘルプファイルの言語。現在 "ja" か "en"。


g:vimhelpgenerator_defaultoverrider	*g:vimhelpgenerator_defaultoverrider*
	既定値: "default"
	generator のオーバーライドに使われる{overrider-name}。
	autoload/vimhelpgenerator/overrider/{overrider-name} という具合に利用
	される。|vimhelpgenerator-overrider|


g:vimhelpgenerator_contents			*g:vimhelpgenerator_contents*
	既定値: >
	{'contents': 1, 'introduction': 1, 'usage': 1, 'interface': 1,
	\ 'variables': 1, 'commands': 1, 'key-mappings': 1, 'functions': 1,
	\ 'setting': 0, 'todo': 1, 'changelog': 1,}
<	ヘルプファイル表示項目。0にした項目は非表示になる。また、数値を指定す
	ることで、表示順を操作できる。数値が若い項目の方が先に表示される。
	同じ数値の項目は、"contents", "introduction", "usage", "interface",
	"variables", "commands", "key-mappings", "functions", "todo",
	"changelog" の順位で表示される。


------------------------------------------------------------------------------
コマンド					*vimhelpgenerator-commands*

:VimHelpGenerator [{overrider-name} [{path}]]	*:VimHelpGenerator*
	現在編集中のファイルの所属するプラグインを推定して、ドキュメントを作成
	する。
	{overrider-name}が指定されたなら、|g:vimhelpgenerator_defaultoverrider|
	の代わりにそれを{overrider}として使う|vimhelpgenerator-overrider|。
	{path}が指定されたなら、指定された{path}のプラグインのドキュメントを作
	成する。
	{overrider-name}を指定せずに{path}だけ指定したいのなら、
	{overrider-name}に、'' か "" を指定することで{overrider-name}の指定を
	無しに等しくすることが出来る。

	ヘルプファイルがすでに存在するとき、安全のために仮想バッファで生成され
	る。つまり|:VimHelpGeneratorVirtual|を実行したのと同じ結果になる。
	変数のうち、型が辞書のものは、正常に既定値を取得できない。また、そうで
	なくても変数の既定値は正確ではないので、利用者が確認し手直しする必要が
	ある。

						*:VimHelpGeneratorVirtual*
:VimHelpGeneratorVirtual [{overrider-name} [{path}]]
	作成したファイルを仮想バッファで開く。このバッファは書き込みが出来ない
	。新しい機能を追加したときに、既存のヘルプに要素を追記したいときなどに
	使う。仮想バッファの内容の一部を既存のヘルプにコピーペーストするといい
	。バッファの開かれ方には|g:vimhelpgenerator_virtualhelpopencmd|が使わ
	れる。


:[range]HelpIntoMarkdown			*:HelpIntoMarkdown*
	バッファローカルなコマンド
	helpファイル内でのみ利用できる。範囲指定した行をmarkdown形式に変換して
	レジスタ " にセットする。
	その後、README.mdを開く。README.mdが存在しないときには、タイトルなども
	レジスタ " にセットされる。
	※アンダースコア(_)のエスケープには対応していません。

	変換ルール ~
	- |xxx|は`xxx`に
	- > と < で囲まれたソースコード行は ```vim と ``` で囲まれた行に
	- 行頭* や ** や *** で始まる行は 行頭に#### ##### ######に変換
	- 行末~ で終わる行は ~を削除して行頭に####を追加
	- ====という区切り行の次に出てきたタグ行は 行頭に##に変換
	- ----という区切り行の次に出てきたタグ行は 行頭に###に変換
	- これ以外のタグ行は 行頭に###に変換
	- 通常行が68桁目以降を越えたら次の行と行連結される
	- 行頭-または数字とドットで始まるリスト行グループの前に空行を挟む
	- リストでもタイトル行でもない行は行末にスペースが2つ付く(改行のため)


------------------------------------------------------------------------------
関数						*vimhelpgenerator-functions*

						*vimhelpgenerator#generate()*
vimhelpgenerator#generate({is-virtual}, [{overrider-name}, [{path}]])
	|:VimHelpGenerator|の実装。


==============================================================================
overriderについて				*vimhelpgenerator-overrider*

overrider はヘルプファイルを作成するのに利用される generator という辞書の、関
数群や値群を上書きすることが出来る。これは generator が初期化される際に
overrider と|extend()|されているためである。generator は
|vimhelpgenerator#generate()|の中で、以下のように呼び出されている。 >
	call generator.make_gitignore()			".gitignoreを作成
	let lines = generator.build_helplines()		"helpに使う行を生成
	let path = generator.make_help(lines)		"helpファイルを作成
これらの中で例えば .gitignore を作らせないように挙動を変更させたければ、何もし
ない .make_gitignore() を定義したoverriderを作ればいい。
generator.build_helplines()の中ではさらにいくつかの関数が呼び出されているが、
それらを上書きすることでも、個々の挙動を変更できる。

overriderは、'runtimepath' が通った autoload/vimhelpgenerator/overrider/ の中
に任意の名前{overrider-name}の {overrider-name}.vim を作成し、辞書を返す関数
vimhelpgenerator#overrider#{overrider-name}#generator() を返すことで作成する。
この中で新しく定義された変数や関数以外は、本来の generatorの変数や関数が使用さ
れる。
overriderは{overrider-name}をコマンド引数に渡すか、
|g:vimhelpgenerator_defaultoverrider|にあらかじめ使用したい{overrider-name}を
指定して利用する。

generatorの要素
	name			プラグイン名
	rootpath		プラグインのルートパス
	variables		収集した変数
	commands		収集したコマンド
	globalkeymappings	収集したキーマッピング（グローバル）
	localkeymappings	収集したキーマッピング（バッファローカル）
	functions		収集した関数
	words			ヘルプで使用する言葉を定義した辞書
	lang			ヘルプで使われる言語
				|g:vimhelpgenerator_defaultlanguage|
	make_gitignore()	.gitignoreファイルを作る
	make_help()		doc/{help-name}.{txt,jax,etc...}ファイルを作る
	build_helplines()	ヘルプの中身を組み立てる
	_contents()		目次を作成
	_introduction()		概要を作成
	_usage()		使い方を作成
	_interface()		インターフェイスを作成
	_variables()		変数を作成
	_commands()		コマンドを作成
	_keymappings()		キーマッピングを作成
	_functions()		関数を作成
	_todo()			TODOを作成
	_changelog		更新履歴を作成

	_caption()		以下の形式のような文字列を生成する >
		CONTENTS	*{plugin-name}-contents*
<	_interface_caption()	以下の形式のような文字列を生成する >
		g:example	*g:example*
<	_contentskeys()		|g:vimhelpgenerator_contents|の要素の内、非0で
				順序に乗っ取って並び替えて、定義されていないイ
				ンターフェイス要素を除いた要素のリストを返す
	_contents_caption	以下の形式のような文字列を生成する >
		INTRODUCTION	|example-introduction|
<	__append_commands_lines()	コマンド文字列をヘルプ用に加工してリス
				トに追加する
	_build_commandhelpstr()	コマンド文字列をヘルプ表示用に加工する
	__append_keymapping_lines()	keymappingsの各要素をソートし、表示用
				に加工してリストに追加する
	__append_defaultkeymappinglist_lines()	デフォルトマッピング一覧表示を
				作成する


==============================================================================
TODO						*vimhelpgenerator-todo*

- testを作成する
- licenseを独立項目として扱えるようにする
- :exec 実行をパースする
- autocmd FileType xxx command! -buffer Xxx  xxx というようなバッファローカル
コマンドを捕捉できない


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
